@page "/weather"

<PageTitle>Weather</PageTitle>
<h1>Weather</h1>
<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table" style="color:lightgreen">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr style="color:@rowColor">
                    <td >@forecast.Date.ToShortDateString()</td>
                    <td >@forecast.TemperatureC</td>
                    <td >@forecast.TemperatureF</td>
                    <td >@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<style>
    * {
        /* color: @rowColor; */
    }
    .table{
        
    }
    .table td {
        color: @rowColor;
    }
    .table th {
        color: @rowColor;
    }
</style>

@code {
    [CascadingParameter(Name = "Fundo")]
    public string? FundoBack { get; set; }
    [CascadingParameter(Name = "Texto")]
    public string? TextoColor { get; set; }
    [CascadingParameter]
    public Action<string>? GetTitle { get; set; }

    private WeatherForecast[]? forecasts;
    private string? rowColor = "";

    protected override async Task OnInitializedAsync()
    {
        ExecuteGetTitleAction();
        rowColor = TextoColor;

        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(10);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private void ExecuteGetTitleAction()
    {
        GetTitle?.Invoke("Titulo Personalizado Weather Page");
    }
}
